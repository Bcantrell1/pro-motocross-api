definitions:
  database.Attendee:
    properties:
      eventId:
        type: integer
      id:
        type: integer
      riderId:
        type: integer
    type: object
  database.Event:
    properties:
      date:
        type: string
      description:
        minLength: 10
        type: string
      id:
        type: integer
      location:
        minLength: 3
        type: string
      name:
        minLength: 3
        type: string
      ownerId:
        type: integer
    required:
    - date
    - description
    - location
    - name
    - ownerId
    type: object
  database.Rider:
    properties:
      bikeBrand:
        type: string
      careerPoints:
        type: integer
      class:
        type: string
      dateOfBirth:
        type: string
      firstName:
        minLength: 3
        type: string
      id:
        type: integer
      lastName:
        minLength: 3
        type: string
      nationality:
        type: string
      number:
        type: integer
      status:
        type: string
      team:
        type: string
    required:
    - firstName
    - lastName
    - number
    type: object
  database.User:
    properties:
      email:
        type: string
      id:
        type: integer
      name:
        type: string
    type: object
  gin.H:
    additionalProperties: {}
    type: object
  main.loginRequest:
    properties:
      email:
        type: string
      password:
        minLength: 8
        type: string
    required:
    - email
    - password
    type: object
  main.loginResponse:
    properties:
      token:
        type: string
    type: object
  main.registerRequest:
    properties:
      email:
        type: string
      name:
        minLength: 2
        type: string
      password:
        minLength: 8
        type: string
    required:
    - email
    - name
    - password
    type: object
info:
  contact: {}
  description: This is a rest API written in Go utilizing the Gin framework.
  title: Pro Motocross Rest API
  version: "1.0"
paths:
  /api/v1/attendees/{id}/events:
    get:
      description: Get a list of events that a rider is attending
      parameters:
      - description: Attendee ID
        in: path
        name: id
        required: true
        type: integer
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/database.Event'
            type: array
        "400":
          description: Invalid attendee ID
          schema:
            $ref: '#/definitions/gin.H'
        "500":
          description: Failed to retrieve events
          schema:
            $ref: '#/definitions/gin.H'
      summary: Get events for an attendee
      tags:
      - attendees
  /api/v1/auth/login:
    post:
      consumes:
      - application/json
      description: Authenticate a user and return a JWT token
      parameters:
      - description: User login credentials
        in: body
        name: login
        required: true
        schema:
          $ref: '#/definitions/main.loginRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/main.loginResponse'
        "400":
          description: Invalid request body
          schema:
            $ref: '#/definitions/gin.H'
        "401":
          description: Invalid password
          schema:
            $ref: '#/definitions/gin.H'
        "404":
          description: User not found
          schema:
            $ref: '#/definitions/gin.H'
        "500":
          description: Error generating token
          schema:
            $ref: '#/definitions/gin.H'
      summary: Log in a user
      tags:
      - auth
  /api/v1/auth/register:
    post:
      consumes:
      - application/json
      description: Create a new user account with the provided details
      parameters:
      - description: User registration data
        in: body
        name: register
        required: true
        schema:
          $ref: '#/definitions/main.registerRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/database.User'
        "400":
          description: Invalid request body
          schema:
            $ref: '#/definitions/gin.H'
        "500":
          description: Failed to create the user
          schema:
            $ref: '#/definitions/gin.H'
      summary: Register a new user
      tags:
      - auth
  /api/v1/events:
    get:
      description: Get a list of all events
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/database.Event'
            type: array
        "500":
          description: Server failed to get all events
          schema:
            $ref: '#/definitions/gin.H'
      summary: Get all events
      tags:
      - events
    post:
      consumes:
      - application/json
      description: Create a new event with the provided details
      parameters:
      - description: Event data
        in: body
        name: event
        required: true
        schema:
          $ref: '#/definitions/database.Event'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/database.Event'
        "400":
          description: Invalid request body
          schema:
            $ref: '#/definitions/gin.H'
        "500":
          description: Failed to create the event
          schema:
            $ref: '#/definitions/gin.H'
      summary: Create a new event
      tags:
      - events
  /api/v1/events/{id}:
    delete:
      description: Delete an event by its ID
      parameters:
      - description: Event ID
        in: path
        name: id
        required: true
        type: integer
      responses:
        "204":
          description: No Content
        "400":
          description: Invalid event ID
          schema:
            $ref: '#/definitions/gin.H'
        "401":
          description: Unauthorized to delete the event
          schema:
            $ref: '#/definitions/gin.H'
        "404":
          description: Event not found
          schema:
            $ref: '#/definitions/gin.H'
        "500":
          description: Failed to delete the event
          schema:
            $ref: '#/definitions/gin.H'
      summary: Delete an event
      tags:
      - events
    get:
      consumes:
      - application/json
      description: Returns a single event
      parameters:
      - description: Event Id
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/database.Event'
      summary: Returns a single event
      tags:
      - events
    put:
      consumes:
      - application/json
      description: Update an existing event with the provided details
      parameters:
      - description: Event ID
        in: path
        name: id
        required: true
        type: integer
      - description: Updated event data
        in: body
        name: event
        required: true
        schema:
          $ref: '#/definitions/database.Event'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/database.Event'
        "400":
          description: Invalid event ID or request body
          schema:
            $ref: '#/definitions/gin.H'
        "403":
          description: Unauthorized to update the event
          schema:
            $ref: '#/definitions/gin.H'
        "404":
          description: Event not found
          schema:
            $ref: '#/definitions/gin.H'
        "500":
          description: Failed to update event
          schema:
            $ref: '#/definitions/gin.H'
      summary: Update an existing event
      tags:
      - events
  /api/v1/events/{id}/attendees:
    get:
      description: Get a list of riders attending an event
      parameters:
      - description: Event ID
        in: path
        name: id
        required: true
        type: integer
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/database.Rider'
            type: array
        "400":
          description: Invalid event ID
          schema:
            $ref: '#/definitions/gin.H'
        "500":
          description: Failed to retrieve attendees
          schema:
            $ref: '#/definitions/gin.H'
      summary: Get attendees for an event
      tags:
      - attendees
  /api/v1/events/{id}/attendees/{riderId}:
    delete:
      description: Remove a rider as an attendee from an event
      parameters:
      - description: Event ID
        in: path
        name: id
        required: true
        type: integer
      - description: Rider ID
        in: path
        name: riderId
        required: true
        type: integer
      responses:
        "204":
          description: No Content
        "400":
          description: Invalid event or rider ID
          schema:
            $ref: '#/definitions/gin.H'
        "401":
          description: Unauthorized as you don't own the event
          schema:
            $ref: '#/definitions/gin.H'
        "500":
          description: Failed to delete attendee
          schema:
            $ref: '#/definitions/gin.H'
      summary: Remove a rider from an event
      tags:
      - attendees
    post:
      description: Add a rider as an attendee to an event
      parameters:
      - description: Event ID
        in: path
        name: id
        required: true
        type: integer
      - description: Rider ID
        in: path
        name: riderId
        required: true
        type: integer
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/database.Attendee'
        "400":
          description: Invalid event or rider ID
          schema:
            $ref: '#/definitions/gin.H'
        "401":
          description: Unauthorized to add attendee
          schema:
            $ref: '#/definitions/gin.H'
        "404":
          description: Event or rider not found
          schema:
            $ref: '#/definitions/gin.H'
        "409":
          description: Rider already signed up for this event
          schema:
            $ref: '#/definitions/gin.H'
        "500":
          description: Failed to add rider to event
          schema:
            $ref: '#/definitions/gin.H'
      summary: Add a rider to an event
      tags:
      - attendees
  /api/v1/riders:
    get:
      description: Get a list of all riders
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/database.Rider'
            type: array
        "500":
          description: Server failed to get all riders
          schema:
            $ref: '#/definitions/gin.H'
      summary: Get all riders
      tags:
      - riders
    post:
      consumes:
      - application/json
      description: Create a new rider with the provided details
      parameters:
      - description: Rider data
        in: body
        name: rider
        required: true
        schema:
          $ref: '#/definitions/database.Rider'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/database.Rider'
        "400":
          description: Invalid request body
          schema:
            $ref: '#/definitions/gin.H'
        "500":
          description: Failed to create the rider
          schema:
            $ref: '#/definitions/gin.H'
      summary: Create a new rider
      tags:
      - riders
  /api/v1/riders/{id}:
    delete:
      description: Delete a rider by their ID
      parameters:
      - description: Rider ID
        in: path
        name: id
        required: true
        type: integer
      responses:
        "204":
          description: No Content
        "400":
          description: Invalid rider ID
          schema:
            $ref: '#/definitions/gin.H'
        "500":
          description: Failed to delete the rider
          schema:
            $ref: '#/definitions/gin.H'
      summary: Delete a rider
      tags:
      - riders
    get:
      description: Get details of a rider by their ID
      parameters:
      - description: Rider ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/database.Rider'
        "400":
          description: Invalid rider ID
          schema:
            $ref: '#/definitions/gin.H'
        "404":
          description: No rider found at that ID
          schema:
            $ref: '#/definitions/gin.H'
        "500":
          description: Server failed to get the requested rider
          schema:
            $ref: '#/definitions/gin.H'
      summary: Get a rider by ID
      tags:
      - riders
    put:
      consumes:
      - application/json
      description: Update an existing rider with the provided details
      parameters:
      - description: Rider ID
        in: path
        name: id
        required: true
        type: integer
      - description: Updated rider data
        in: body
        name: rider
        required: true
        schema:
          $ref: '#/definitions/database.Rider'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/database.Rider'
        "400":
          description: Invalid rider ID or request body
          schema:
            $ref: '#/definitions/gin.H'
        "404":
          description: Rider not found
          schema:
            $ref: '#/definitions/gin.H'
        "500":
          description: Failed to update rider
          schema:
            $ref: '#/definitions/gin.H'
      summary: Update a rider
      tags:
      - riders
security:
- BearerAuth: []
securityDefinitions:
  BearerAuth:
    description: Enter your bearer token in the format **Bearer &lt;token&gt;**
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
